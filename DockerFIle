FROM node:16-alpine3.14 as builder
RUN apk add --no-cache python3 make g++
WORKDIR /usr/src/app
COPY package.json package-lock.json ./
Copy . ./
RUN npm ci --production

FROM node:16-alpine3.14 as app
COPY --from=builder /usr/src/app/ .
RUN npm run build --prod

FROM nginx:1.12-alpine
COPY --from=app /build /usr/share/nginx/html
COPY ./nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]



FROM python:3.10-alpine
RUN git clone https://github.com/Aqgromalin-FarmTech2/aqgromalin-user.git
ENV APP_HOME /app
WORKDIR $APP_HOME
ENV PYTHONUNBUFFERED 1
COPY /aqgromalin-user/requirements.txt .
RUN apk add --no-cache --virtual .build-deps \
    gcc postgresql-dev linux-headers musl-dev \
    libffi-dev jpeg-dev zlib-dev \
    && pip install --no-cache-dir -r requirements.txt \
    && find /usr/local \
        \( -type d -a -name test -o -name tests \) \
        -o \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
        -exec rm -rf '{}' + \
    && runDeps="$( \
        scanelf --needed --nobanner --recursive /usr/local \
                | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
                | sort -u \
                | xargs -r apk info --installed \
                | sort -u \
    )" \
    && apk add --virtual .rundeps $runDeps \
    && apk del .build-deps
COPY /aqgromalin-user/. .
EXPOSE 8080
CMD uwsgi --ini $APP_HOME/uwsgi.ini

FROM node:16-alpine3.14 as builder
RUN apk add --no-cache python3 make g++
WORKDIR /usr/src/app
Copy /aqgromalin_user_react/. ./
RUN npm ci --production

FROM node:16-alpine3.14 as app
COPY --from=builder /usr/src/app/ .
RUN npm run build --prod

FROM nginx:1.12-alpine
COPY --from=app /build /usr/share/nginx/html
COPY /aqgromalin_user_react/nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
